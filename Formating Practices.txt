Coding Conventions:

Considerations:
1. () <- Not included in names. Used to describe a part that is replaced with something else. It is required.
2. ... <- Not included in names. Represents a continuation of a sequence or something that should be obvious to fill in.
3. "" <- represents a type, format, object, ect. located within a sentance. Used to show the bounds of the beginning and End of the type, format, object, ect. 
4. {} <- Not included in names. Used to describe a part that is only needed if the conditions for it are met or is needed. Optional unless conditions are met or if needed. "{}" overides "()".
5. All initializations can have exceptions. And its semi common.
6. One indent Format

======================================

Class Conventions:

Introduction:
Ok so the class names are relatively simple because they do not contain a prefix. This is due to the fact classes dont have a scope, multiple types, and are usually always changed.
ALL classes will and must have an initializer see Function/Methods for its conventions.

Naming Conventions:
All classes will be named with a max of three full words of what it represents or is. Every word will have the first letter uppercased. The format is "(ClassName):". Class names typically should represent a real world object/thing/principle. Class names should typically only have the actual name of the object/thing/principle with the exception of descriptive words like "Big", "Tiny", "Molten".
Examples:
Valid: "Dog", "LargeComputerCase"
Invalid: "dog", "Large_Computer_Case", "largeDog"
Optionaly Invalid: "ADog", "TheLargeCase"

Conclusion:
When it comes to the name of classes it really depends what its being used for. There will probably be exceptions.

======================================

Functions/Methods Conventions:

Introduction:
Oh boy, so this is where it starts getting complex. Functions/Methods have a scope, name, and suffix.

Naming Conventions:
All functions will be named with a max of five full words describing a operation, process, action, function, ect. This does not include the return types, scope, and suffix the function has.

Function/Method Parts:
Scope:
The scope of the variable is located at the very front of the variable and is represented with a single letter. See Below for scope options. The format is "(scope)(Function)(Suffix)".
Scope Options:
1. "g" for a Global scope
2. "l" for a Local scope
3. "e" for an enclosed scope

======================================

Variable Conventions:

Variable Parts:
Variables have two parts the "prefix" and the "variable name"

Naming Conventions:
All variables will be named with a max of three full words describing what it does or is. This does not include the types and scope prefix parts the variable has. Every consecutive word after the prefix will have the first letter uppercased. The format is "(prefix)(VariableName)".
Examples:
Valid: "(prefix)NumberOfDogs", "(prefix)Cats"
Invalid: "(prefix)VeryLongAndComplicatedVariableName"

Prefix Parts:
Scope:
The scope of the variable is located at the very front of the variable and is represented with a single letter. See Below for scope options. The format is "(scope)(RestOfPrefix)(VariableName)".
Scope Options:
1. "g" for a Global scope
2. "l" for a Local scope
3. "e" for an enclosed scope
4. Theres a fourth one but I dont really use it. I think.
Examples:
Valid: "g(RestOfPrefix)(VariableName)", "l(RestOfPrefix)(VariableName)", "e(RestOfPrefix)(Variable)"
Invalid: "(RestOfPrefix)(VariableName)g", "(RestOfPrefix)(VariableName)Local"

Constants: 
Constant Variables will have the key word "Const" located after the scope of the variable. The format is "(scope){(Const)}(RestOfPrefix)(VariableName)".
Examples:
Valid: "(scope)Const(RestOfPrefix)(VariableName)"
Invalid: "(scope)Con(RestOfPrefix)(VariableName)", "(scope)Constant(RestOfPrefix)(VariableName)", "(scope)(RestOfPrefix)(VariableName)Const"

Type(s):
This one is complicated because one variable may be used to hold multiple different types. There will ALWAYS be a MAXIMUM of three "(Singletypes)" that are listed in each part of the prefix if needed. If it holds more than it will be represented by a catagory type. If there is more than one catagory it holds then it will be represented using the "Any" keyword. In general the types a variable will hold will be in this format "_(Singletype1)_{(Singletype2)_(Singletype3)}_". The complete format for the variable will be "(scope){(Const)}({(MultiFormat)}{(SingleTypes)})(VariableName)" The reason "{(MultiFormat)}" AND "{(SingleTypes)}" are both conditional and optional is because if one occurs than the other doesent so they are dependent on each other.
Variable Options:
Catagories:
1. "Any" used to represent a variable that holds multiple Catagories or any type. Initialized with "None"
2. "Num" used to represent a variable that holds types like int, float, double, ect. 
3. "Multi" used for variables that hold multiple values like lists, dictonaries, tuples, ect. See the special format down below.
Single Type:
1. "Char" used to represent a character. Initialized with "''"
2. "Obj" used to represent variables that hold an object. Initialized with "None"
3. "Str" used to represent variables that hold a string. Initialized with """"
4. "Int" used to represent variables that hold a integer. Initialized with "0" or "1"
5. "Float" used to represent variables that hold a decimal number. Initialized with "0.0"
6. "Bool" used to represent variables that hold a boolean. Initialized with "False"
7. Look up the other python types. Your funny if you think im listing them all.

Examples:
Valid: "(scope){(Const)}_int_(VariableName)", "(scope){(Const)}_Any_Str_(VariableName)", "(scope){(Const)}_Char_Num_Obj_(VariableName)"
Invalid: "(scope){(Const)}__int__(VariableName)", "(scope){(Const)}Multi_Obj(VariableName)", "(scope){(Const)}(VariableName)_Multi_Num_Obj_", "(scope){(Const)}_Char_Num_Obj_Int_(VariableName)"

Multi Format:
The format for variables of the "Multi" type are very importaint because there can be "Multi" types within "Multi" types. All types within the "Multi" type will be enclosed with the key words "InnerBeg" and "InnerEnd". This can be used to keep nesting down "Multi" types although rare. The variables with the "Multi" type will be in this format "_Multi_(MultiType)_{(KeyType)}_InnerBeg_{(SingleTypes)}_{(OtherMultiFormats)}_InnerEnd_".
Multi Types:
1. "Dict" used to represent a variable with the dictionary type as one, some, or all of its "Multi" types. Initialized with "{}"
    Format: "_Multi_Dict_(KeyType)_InnerBeg_{(Singletypes)}_{(OtherMultiFormats)}_InnerEnd_"
2. "List" used to represent a variable with the List type as one, some, or all of its "Multi" types. Initialized with "[]"
    Format: "_Multi_List_InnerBeg_{(Singletypes)}_{(OtherMultiFormats)}_InnerEnd_"
3. "Tuple" used to represent a variable with the Tuple type as one, some, or all of its "Multi" types. Initialized with "()"
    Format: "_Multi_Tuple_InnerBeg_{(Singletypes)}_{(OtherMultiFormats)}_InnerEnd_"

Conclusion:
These variable conventions are useful because there formated nicely but also what they represent sounds nicely phrased.
Example:
"gConst_int_NumErrors" would convert too -> Global Constant Integer With the name NumErrors

In this example "Num" was used instead of "Number" not because of length but because of the sounding of it. Fluent names priortize over the Variable Names Description.

======================================

